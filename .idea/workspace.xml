<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="1ca4c01e-9cf7-4c72-9ad5-1abac12b544d" name="Default Changelist" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ProjectId" id="1cyofYBQnG7vDWPZJ8e986aVItk" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../matching-brackets" />
  </component>
  <component name="ReplState" timestamp="1591911096954">{:repl-history {:ide [], :local [{:command &quot;\&quot;hi\&quot;&quot;, :offset 4, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 10 rep)&quot;, :offset 13, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 10 (rep 10))&quot;, :offset 18, :ns &quot;data-encryption.core&quot;} {:command &quot;(def fibLazy                                                ;;returns lazy seq of all fibo numbers\n  ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n   0 1))&quot;, :offset 166, :ns &quot;data-encryption.core&quot;} {:command &quot;(def fiboNums (into [] (take 25 fibLazy)))                  ;; vector of first 25 fibo numbers\n&quot;, :offset 95, :ns &quot;data-encryption.core&quot;} {:command &quot;(println fiboNums)&quot;, :offset 18, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 25 fibLazy)&quot;, :offset 17, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn rep [n]\n  (lazy-seq (cons n (rep n))))&quot;, :offset 44, :ns &quot;data-encryption.core&quot;} {:command &quot;(reduce + (take 3 (map inc (rep 5))))\n&quot;, :offset 38, :ns &quot;data-encryption.core&quot;} {:command &quot;(reduce + (take 1 (map inc (rep 5))))\n&quot;, :offset 38, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 1 (map inc (rep 5)))&quot;, :offset 26, :ns &quot;data-encryption.core&quot;} {:command &quot;(reduce + (take 10 (map inc (rep 5))))\n&quot;, :offset 39, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 10 (map inc (rep 5)))&quot;, :offset 27, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 10 (map rep 5))&quot;, :offset 21, :ns &quot;data-encryption.core&quot;} {:command &quot;(take 10 (map (rep 5)))&quot;, :offset 23, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazySquare                                                ;;returns lazy seq of all fibo numbers\n  ((fn sqr [n]\n     (lazy-seq (cons (* n n) (sqr n))))\n    1))&quot;, :offset 164, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazySquare                                                ;;returns lazy seq of all fibo numbers\n  ((fn sqr [n]\n     (lazy-seq (cons (* n n) (sqr n))))\n    1))\n(into [] (take 10 LazySquare))&quot;, :offset 195, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazySquare                                                ;;returns lazy seq of all fibo numbers\n  ((fn sqr [n]\n     (lazy-seq (cons (* n n) (sqr (inc n)))))\n    1))&quot;, :offset 170, :ns &quot;data-encryption.core&quot;} {:command &quot;(into [] (take 10 LazySquare))\n&quot;, :offset 31, :ns &quot;data-encryption.core&quot;} {:command &quot;(into [] (take 30 LazySquare))&quot;, :offset 30, :ns &quot;data-encryption.core&quot;} {:command &quot;(into [] (take 50 LazySquare))&quot;, :offset 30, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazyRectangle                                                ;;returns lazy seq of all fibo numbers\n  ((fn sqr [n]\n     (lazy-seq (cons (* n (dec n)) (sqr (inc n)))))\n   1))&quot;, :offset 178, :ns &quot;data-encryption.core&quot;} {:command &quot;(into [] (take 50 LazyRectangle))&quot;, :offset 33, :ns &quot;data-encryption.core&quot;} {:command &quot;(into [] (take 10 LazyRectangle))\n&quot;, :offset 34, :ns &quot;data-encryption.core&quot;} {:command &quot;(def squarList(into [] (take 50 LazySquare)))&quot;, :offset 45, :ns &quot;data-encryption.core&quot;} {:command &quot;(println squarList)&quot;, :offset 19, :ns &quot;data-encryption.core&quot;} {:command &quot;(def squareList (into [] (take 50 LazySquare)))              ;;vector of first 50 square nums\n&quot;, :offset 94, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazyRectangle\n  ((fn sqr [n]\n     (lazy-seq (cons (* n (dec n)) (sqr (inc n)))))\n   2))&quot;, :offset 92, :ns &quot;data-encryption.core&quot;} {:command &quot;(def rectangleList (into [] (take 50 LazyRectangle)))       ;; vector of first 50 (n * (n-1))\n&quot;, :offset 94, :ns &quot;data-encryption.core&quot;} {:command &quot;(println rectangleList)&quot;, :offset 23, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn inp\n  (let [input (read)]\n    input))&quot;, :offset 43, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn inp []\n  (let [input (read)]\n    input))&quot;, :offset 46, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn inp []\n  (println \&quot;Input data vector\&quot;)\n  (let [input (read)]\n    input))&quot;, :offset 78, :ns &quot;data-encryption.core&quot;} {:command &quot;(def input inp)&quot;, :offset 15, :ns &quot;data-encryption.core&quot;} {:command &quot;(count input)&quot;, :offset 13, :ns &quot;data-encryption.core&quot;} {:command &quot;(squareList)&quot;, :offset 12, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazyRectangle\n  ((fn sqr [n]\n     (lazy-seq (cons (* n (dec n)) (sqr (inc n)))))\n   1))&quot;, :offset 92, :ns &quot;data-encryption.core&quot;} {:command &quot;(def rectangleList (into [] (take 50 LazyRectangle)))       ;; vector of first 50 ((n-1) * n)\n&quot;, :offset 94, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn inp []                                                ;;get vector input / count elements\n  (println \&quot;Input data vector\&quot;)\n  (let [input (read)]\n    input))&quot;, :offset 161, :ns &quot;data-encryption.core&quot;} {:command &quot;(def input (inp))\n&quot;, :offset 18, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn checkSquare []\n  (loop [counted inputCount square squareList i 0]\n    (if (= counted (nth square i))\n      i\n      (if (&gt; i 25)\n        false\n        (recur counted square (inc i))))))&quot;, :offset 190, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn checkSquare []\n  (loop [counted inputCount square squareList i 0]\n    (if (= counted (nth square i))\n      (nth square i)\n      (if (&gt; i 25)\n        false\n        (recur counted square (inc i))))))&quot;, :offset 203, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn checkSquare []\n  (loop [counted inputCount square squareList i 0]\n    (if (= counted (nth square i))\n      (inc i)\n      (if (&gt; i 25)\n        false\n        (recur counted square (inc i))))))&quot;, :offset 196, :ns &quot;data-encryption.core&quot;} {:command &quot;(checkSquare)&quot;, :offset 13, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn squareFinder []                                        ;;checks if input count is square. if it was, returns sqrt\n  (loop [counted inputCount square squareList i 0]\n    (if (= counted (nth square i))\n      (inc i)\n      (if (&gt; i 25)\n        false\n        (recur counted square (inc i))))))&quot;, :offset 295, :ns &quot;data-encryption.core&quot;} {:command &quot;(println rectangleList)\n&quot;, :offset 24, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn rectangleFinder []\n  (loop [i 0]\n    (if (&gt; i 25)\n      (println \&quot;error rectangle\&quot;)\n      (if (&gt; inputCount (nth rectangleList i)\n             i\n             (recur (inc i)))))))&quot;, :offset 184, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn rectangleFinder []\n  (loop [i 0]\n    (if (&gt; i 25)\n      (println \&quot;error rectangle\&quot;)\n      (if (&gt; inputCount (nth rectangleList i))\n             i\n             (recur (inc i))))))&quot;, :offset 184, :ns &quot;data-encryption.core&quot;} {:command &quot;(println input)\n&quot;, :offset 16, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn rectangleFinder []\n  (loop [i 0]\n    (if (&gt; i 25)\n      (println \&quot;rectangle out of boundary \&quot;)\n      (if (&lt; inputCount (nth rectangleList i))\n             i\n             (recur (inc i))))))&quot;, :offset 195, :ns &quot;data-encryption.core&quot;} {:command &quot;(def inputCount (count input))\n&quot;, :offset 31, :ns &quot;data-encryption.core&quot;} {:command &quot;(def dif (- (* (rectangleFinder) (inc (rectangleFinder))) inputCount))&quot;, :offset 70, :ns &quot;data-encryption.core&quot;} {:command &quot;(println dif)&quot;, :offset 13, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn fillIn []\n  (loop [i dif inputRectangle input]\n    (if (not= i 0)\n      (recur (dec i) (conj inputRectangle \&quot;\&quot;))\n      inputRectangle)))&quot;, :offset 142, :ns &quot;data-encryption.core&quot;} {:command &quot;(fillIn)&quot;, :offset 8, :ns &quot;data-encryption.core&quot;} {:command &quot;(def RecFillCount (count (fillIn)))&quot;, :offset 35, :ns &quot;data-encryption.core&quot;} {:command &quot;(def recFillCount (count (fillIn)))\n&quot;, :offset 36, :ns &quot;data-encryption.core&quot;} {:command &quot;(println recFillCount)&quot;, :offset 22, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn test-recur []\n  (loop [i 0]\n    (if (&gt; i 3)\n      (println \&quot;hello! \&quot;)\n      (loop [j 0]\n        (if (&gt; j 5)\n          j\n          (println \&quot;hi! \&quot;))\n        (recur (inc j)))\n      (recur (inc i)))))&quot;, :offset 203, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn test-recur2 []\n  (loop [i 0]\n    (if (&lt; 3 i)\n      i\n      ((loop [j 0]\n         (if (&lt; 2 j)\n           j\n           ((println (str \&quot; hi \&quot; j)) \n            (recur (inc j)))))\n       (recur (inc i))))))&quot;, :offset 207, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn test-recur3 []\n  (loop [i 0]\n    (if (&gt; i 3)\n      i\n      (loop [j 0]\n        (if (&gt; j 3)\n          ((println \&quot;j done \&quot;) \n           j)\n          (recur (inc j)))))))&quot;, :offset 173, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn test-recur3 []\n  (loop [i 0]\n    (if (&gt; i 3)\n      i\n      (loop [j 0]\n        (if (&gt; j 3)\n          j\n          (recur (inc j)))))))&quot;, :offset 139, :ns &quot;data-encryption.core&quot;} {:command &quot;(println (squareList))&quot;, :offset 22, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazySquare\n  ((fn sqr [n]\n     (lazy-seq (cons (* n n) (sqr (inc n)))))\n   0))&quot;, :offset 83, :ns &quot;data-encryption.core&quot;} {:command &quot;(def squareList (into [] (take 50 LazySquare)))    \n&quot;, :offset 52, :ns &quot;data-encryption.core&quot;} {:command &quot;(println squareList)&quot;, :offset 20, :ns &quot;data-encryption.core&quot;} {:command &quot;(println input)&quot;, :offset 15, :ns &quot;data-encryption.core&quot;} {:command &quot;(def input (inp))&quot;, :offset 17, :ns &quot;data-encryption.core&quot;} {:command &quot;(def inputCount (count input))&quot;, :offset 30, :ns &quot;data-encryption.core&quot;} {:command &quot;(println inputCount)&quot;, :offset 20, :ns &quot;data-encryption.core&quot;} {:command &quot;(def LazySquare\n  ((fn sqr [n]\n     (lazy-seq (cons (* n n) (sqr (inc n)))))\n   1))&quot;, :offset 83, :ns &quot;data-encryption.core&quot;} {:command &quot;(def squareList (into [] (take 50 LazySquare)))             ;;vector of first 50 square nums\n&quot;, :offset 93, :ns &quot;data-encryption.core&quot;} {:command &quot;(squareFinder)&quot;, :offset 14, :ns &quot;data-encryption.core&quot;} {:command &quot;(defn test-recur3 []\n  (loop [i 0]\n    (if (&gt; i 3)\n      i\n      (loop [j 0]\n        (if (&gt; j 3)\n          (recur (inc i))\n          (recur (inc j)))))))&quot;, :offset 153, :ns &quot;data-encryption.core&quot;} {:command &quot;(test-recur3)\n&quot;, :offset 14, :ns &quot;data-encryption.core&quot;} {:command &quot;(test-recur3)&quot;, :offset 13, :ns &quot;data-encryption.core&quot;} {:command &quot;\&quot;ho\&quot;&quot;, :offset 4, :ns &quot;data-encryption.core&quot;} {:command &quot;(rectangleFinder)&quot;, :offset 17, :ns &quot;data-encryption.core&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="encryption" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="data-encryption" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="1ca4c01e-9cf7-4c72-9ad5-1abac12b544d" name="Default Changelist" comment="" />
      <created>1591510297327</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1591510297327</updated>
      <workItem from="1591510300962" duration="51327000" />
      <workItem from="1591726645591" duration="9823000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="WindowStateProjectService">
    <state x="552" y="178" key="#Notifications" timestamp="1591708188380">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="552" y="178" key="#Notifications/0.0.1920.1040@0.0.1920.1040" timestamp="1591708188380" />
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1591510329616">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1591510329616" />
    <state x="740" y="275" key="FileChooserDialogImpl" timestamp="1591859022573">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="740" y="275" key="FileChooserDialogImpl/0.0.1920.1040@0.0.1920.1040" timestamp="1591859022573" />
  </component>
</project>